<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= componentType %> Bundle Analysis Report</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
  <style>
    :root {
      --primary-color: #7e6edb;
      --secondary-color: #5a4caf;
      --text-color: #333;
      --background-color: #fff;
      --border-color: #e0e0e0;
      --hover-color: #f5f5f5;
      --bar-bg: #eeedf5;
      --dep-color: #7e6edb; /* Purple for dependencies */
      --project-color: #4CAF50; /* Green for project files */
      --chart-dep-bg: rgba(126, 110, 219, 0.7);
      --chart-project-bg: rgba(76, 175, 80, 0.7);
      --chart-dep-border: #7e6edb;
      --chart-project-border: #4CAF50;
      --section-bg: #f9f9f9;
    }
    
    @media (prefers-color-scheme: dark) {
      :root {
        --primary-color: #9d91e8;
        --secondary-color: #7a6dce;
        --text-color: #e0e0e0;
        --background-color: #2d2d2d;
        --border-color: #444;
        --hover-color: #3a3a3a;
        --bar-bg: #3d3a5c;
        --dep-color: #9d91e8;
        --project-color: #66bb6a;
        --chart-dep-bg: rgba(157, 145, 232, 0.7);
        --chart-project-bg: rgba(102, 187, 106, 0.7);
        --chart-dep-border: #9d91e8;
        --chart-project-border: #66bb6a;
        --section-bg: #333333;
      }
    }
    
    * {
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      margin: 0;
      padding: 20px;
      color: var(--text-color);
      background-color: var(--background-color);
      line-height: 1.6;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    header {
      margin-bottom: 40px;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 20px;
    }
    
    h1, h2 {
      color: var(--primary-color);
    }
    
    h1 {
      margin-bottom: 10px;
    }
    
    .summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .summary-box {
      background-color: var(--bar-bg);
      border-radius: 8px;
      padding: 15px;
    }
    
    .summary-box h3 {
      margin-top: 0;
      margin-bottom: 10px;
      color: var(--primary-color);
      font-size: 1.1rem;
    }
    
    .summary-box p {
      margin: 0;
      font-size: 1.6rem;
      font-weight: bold;
    }

    .charts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
      margin-bottom: 40px;
    }

    .chart-container {
      padding: 20px;
      border-radius: 8px;
      background-color: var(--section-bg);
      height: 400px; /* Fixed height for consistency */
    }
    
    .section {
      margin-bottom: 40px;
      padding: 20px;
      border-radius: 8px;
      background-color: var(--section-bg);
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      flex-wrap: wrap;
    }
    
    .section-badge {
      display: inline-block;
      padding: 5px 10px;
      border-radius: 20px;
      color: white;
      font-weight: 500;
      font-size: 0.9rem;
      margin-left: 10px;
    }
    
    .dependency-badge {
      background-color: var(--dep-color);
    }
    
    .project-badge {
      background-color: var(--project-color);
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px; /* Space for pagination */
    }
    
    th, td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid var(--border-color);
    }
    
    th {
      background-color: var(--bar-bg);
      color: var(--primary-color);
      font-weight: 600;
      cursor: pointer; /* For sortable columns */
    }
    
    tr:hover {
      background-color: var(--hover-color);
    }
    
    .file-name {
      word-break: break-all; /* Allow long names to break */
    }
    
    .bar-container {
      background-color: var(--bar-bg);
      border-radius: 4px;
      height: 20px;
      overflow: hidden;
      width: 100%;
    }
    
    .bar {
      height: 100%;
      transition: width 0.3s ease;
    }
    
    .dependency-bar {
      background-color: var(--dep-color);
    }
    
    .project-bar {
      background-color: var(--project-color);
    }
    
    .controls-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      flex-wrap: wrap;
      gap: 15px;
    }
    
    .search-box {
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      font-size: 1rem;
      background-color: var(--background-color);
      color: var(--text-color);
      min-width: 250px;
      flex-grow: 1;
    }

    .pagination-controls {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .pagination-controls button, .pagination-controls select {
      padding: 8px 12px;
      border-radius: 4px;
      border: 1px solid var(--primary-color);
      background-color: var(--primary-color);
      color: white;
      cursor: pointer;
      font-size: 0.9rem;
    }
    .pagination-controls button:disabled {
      background-color: var(--border-color);
      border-color: var(--border-color);
      cursor: not-allowed;
    }
    .pagination-controls select {
       background-color: var(--background-color);
       color: var(--text-color);
    }
    
    footer {
      margin-top: 40px;
      border-top: 1px solid var(--border-color);
      padding-top: 20px;
      font-size: 0.9rem;
      color: #888;
      text-align: center;
    }
    
    .toggle-section {
      cursor: pointer;
      user-select: none;
      padding: 8px 12px;
      border-radius: 4px;
      background-color: var(--secondary-color);
      color: white;
      font-size: 0.9rem;
    }
    
    @media (max-width: 768px) {
      .summary-grid {
        grid-template-columns: 1fr; /* Stack summary boxes */
      }
      .charts-grid {
        grid-template-columns: 1fr; /* Stack charts */
      }
      th, td {
        padding: 8px 10px;
        font-size: 0.9rem;
      }
      .controls-container {
        flex-direction: column;
        align-items: stretch;
      }
      .search-box {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1><%= componentType %> Bundle Analysis</h1>
      <p>Generated on <%= new Date().toLocaleString() %></p>
    </header>
    
    <div class="summary-grid">
      <div class="summary-box">
        <h3>Total Size</h3>
        <p><%= (stats.totalBytes / 1024).toFixed(2) %> KB</p>
      </div>
      <div class="summary-box">
        <h3>Gzipped Size</h3>
        <p><%= (gzippedSize / 1024).toFixed(2) %> KB</p>
      </div>
      <div class="summary-box">
        <h3>Dependencies</h3>
        <p><%= (stats.totalDependencyBytes / 1024).toFixed(2) %> KB </p>
        <span>(<%= stats.dependencyPercentage %>%)</span>
      </div>
      <div class="summary-box">
        <h3>Project Files</h3>
        <p><%= (stats.totalProjectBytes / 1024).toFixed(2) %> KB</p>
        <span>(<%= stats.projectPercentage %>%)</span>
      </div>
    </div>

    <div class="charts-grid">
      <div class="chart-container">
        <h2>Overall Composition</h2>
        <canvas id="compositionPieChart"></canvas>
      </div>
      <div class="chart-container">
        <h2>Top 5 Dependencies</h2>
        <canvas id="topDepsBarChart"></canvas>
      </div>
      <div class="chart-container">
        <h2>Top 5 Project Modules</h2>
        <canvas id="topProjectBarChart"></canvas>
      </div>
    </div>
    
    <div class="controls-container">
      <input type="text" id="searchInput" class="search-box" placeholder="Search packages or files...">
      <button id="projectBackBtn" class="pagination-controls-button" style="display: none;">Back to Parent</button>
    </div>
    
    <div class="section" id="dependenciesSection">
      <div class="section-header">
        <h2>Dependencies <span class="section-badge dependency-badge"><%= stats.dependencyCount %> files</span></h2>
        <button class="toggle-section" data-target="dependenciesTable">Hide/Show</button>
      </div>
      <table id="dependenciesTable">
        <thead>
          <tr>
            <th data-sort="name">Package</th>
            <th data-sort="size">Size (KB)</th>
            <th data-sort="percentage">Percentage</th>
            <th>Visualization</th>
          </tr>
        </thead>
        <tbody>
          <% files.filter(file => file.isDependency).forEach(file => { %>
            <tr>
              <td class="file-name"><%= file.name %></td>
              <td><%= (file.size / 1024).toFixed(2) %></td>
              <td><%= file.percentage %>%</td>
              <td>
                <div class="bar-container">
                  <div class="bar dependency-bar" style="width: <%= `${file.percentage}%` %>"></div>
                </div>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
      <div class="pagination-controls" id="depsPagination">
        <!-- Pagination for dependencies will be generated here -->
      </div>
    </div>
    
    <div class="section" id="projectFilesSection">
      <div class="section-header">
        <h2>Project Files <span id="projectPathDisplay"></span> <span class="section-badge project-badge"><%= stats.projectFileCount %> files</span></h2>
        <button class="toggle-section" data-target="projectFilesTable">Hide/Show</button>
      </div>
      <table id="projectFilesTable">
        <thead>
          <tr>
            <th data-sort="name">File/Module</th>
            <th data-sort="size">Size (KB)</th>
            <th data-sort="percentage">Percentage</th>
            <th>Visualization</th>
          </tr>
        </thead>
        <tbody>
          <% files.filter(file => !file.isDependency).forEach(file => { %>
            <tr>
              <td class="file-name"><%= file.name %></td>
              <td><%= (file.size / 1024).toFixed(2) %></td>
              <td><%= file.percentage %>%</td>
              <td>
                <div class="bar-container">
                  <div class="bar project-bar" style="width: <%= `${file.percentage}%` %>"></div>
                </div>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
      <div class="pagination-controls" id="projectPagination">
        <!-- Pagination for project files will be generated here -->
      </div>
    </div>
    
    <footer>
      <p>Magus Mark Bundle Analysis Report - Generated with custom source-map analyzer</p>
      <p><a href="https://neurodiversity.design" target="_blank" rel="noopener noreferrer">Inspired by Neurodiversity.design principles</a></p>
    </footer>
  </div>
  
  <script>
    // Make data available to script
    const allFiles = <%- JSON.stringify(files) %>;
    const stats = <%- JSON.stringify(stats) %>;
    const GZIPPED_SIZE = parseFloat(<%= gzippedSize %>); // Ensure this is a number

    // Chart.js defaults for accessibility and neurodiversity
    Chart.defaults.font.family = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif';
    Chart.defaults.font.size = 14; // Slightly larger default
    Chart.defaults.color = getComputedStyle(document.documentElement).getPropertyValue('--text-color').trim();
    Chart.defaults.borderColor = getComputedStyle(document.documentElement).getPropertyValue('--border-color').trim();
    
    // Helper to format bytes
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    document.addEventListener('DOMContentLoaded', function() {
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

      // 1. Overall Composition Pie Chart
      const compCtx = document.getElementById('compositionPieChart').getContext('2d');
      new Chart(compCtx, {
        type: 'pie',
        data: {
          labels: ['Dependencies', 'Project Files'],
          datasets: [{
            label: 'Bundle Composition',
            data: [stats.totalDependencyBytes, stats.totalProjectBytes],
            backgroundColor: [
              getComputedStyle(document.documentElement).getPropertyValue('--chart-dep-bg').trim(),
              getComputedStyle(document.documentElement).getPropertyValue('--chart-project-bg').trim()
            ],
            borderColor: [
              getComputedStyle(document.documentElement).getPropertyValue('--chart-dep-border').trim(),
              getComputedStyle(document.documentElement).getPropertyValue('--chart-project-border').trim()
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          animation: prefersReducedMotion ? { duration: 0 } : undefined,
          plugins: {
            legend: {
              position: 'top',
              labels: { padding: 20 }
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed !== null) {
                    label += formatBytes(context.parsed);
                  }
                  return label;
                }
              }
            }
          }
        }
      });

      // Prepare data for Top N charts
      const topN = 5;
      const dependencies = allFiles.filter(f => f.isDependency).sort((a,b) => b.size - a.size).slice(0, topN);
      const projectFiles = allFiles.filter(f => !f.isDependency).sort((a,b) => b.size - a.size).slice(0, topN);

      // 2. Top Dependencies Bar Chart
      const topDepsCtx = document.getElementById('topDepsBarChart').getContext('2d');
      new Chart(topDepsCtx, {
        type: 'bar',
        data: {
          labels: dependencies.map(d => d.name),
          datasets: [{
            label: 'Size (KB)',
            data: dependencies.map(d => (d.size / 1024).toFixed(2)),
            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--chart-dep-bg').trim(),
            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--chart-dep-border').trim(),
            borderWidth: 1
          }]
        },
        options: {
          indexAxis: 'y', // Horizontal bar chart for readability
          responsive: true,
          maintainAspectRatio: false,
          animation: prefersReducedMotion ? { duration: 0 } : undefined,
          scales: {
            x: {
              beginAtZero: true,
              title: { display: true, text: 'Size (KB)' }
            }
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              callbacks: {
                label: function(context) {
                  return `${context.dataset.label}: ${context.parsed.x} KB`;
                }
              }
            }
          }
        }
      });
      
      // 3. Top Project Modules Bar Chart
      const topProjectCtx = document.getElementById('topProjectBarChart').getContext('2d');
      new Chart(topProjectCtx, {
        type: 'bar',
        data: {
          labels: projectFiles.map(f => f.name),
          datasets: [{
            label: 'Size (KB)',
            data: projectFiles.map(f => (f.size / 1024).toFixed(2)),
            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--chart-project-bg').trim(),
            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--chart-project-border').trim(),
            borderWidth: 1
          }]
        },
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          animation: prefersReducedMotion ? { duration: 0 } : undefined,
          scales: {
            x: {
              beginAtZero: true,
              title: { display: true, text: 'Size (KB)' }
            }
          },
          plugins: {
            legend: { display: false },
             tooltip: {
              callbacks: {
                label: function(context) {
                  return `${context.dataset.label}: ${context.parsed.x} KB`;
                }
              }
            }
          }
        }
      });

      // --- Pagination, Search, Sorting, Toggling Logic ---
      const ITEMS_PER_PAGE_OPTIONS = [10, 25, 50, 100];
      let currentDepPage = 1;
      let currentProjPage = 1;
      let depItemsPerPage = ITEMS_PER_PAGE_OPTIONS[1]; // Default 25
      let projItemsPerPage = ITEMS_PER_PAGE_OPTIONS[1]; // Default 25
      let depSortColumn = 'size';
      let depSortDirection = 'desc';
      let projSortColumn = 'size';
      let projSortDirection = 'desc';
      let projectDrilldownPath = []; // Array to store path segments for breadcrumbs

      const searchInput = document.getElementById('searchInput');
      const depsTableBody = document.querySelector('#dependenciesTable tbody');
      const projectTableBody = document.querySelector('#projectFilesTable tbody');
      const depsPaginationContainer = document.getElementById('depsPagination');
      const projectPaginationContainer = document.getElementById('projectPagination');
      const projectBackBtn = document.getElementById('projectBackBtn');
      const projectPathDisplay = document.getElementById('projectPathDisplay');

      function renderTable(tableBody, data, currentPage, itemsPerPage, type) {
        tableBody.innerHTML = ''; // Clear existing rows
        const start = (currentPage - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        const paginatedItems = data.slice(start, end);

        if (paginatedItems.length === 0 && data.length > 0) { // Handle case where current page is out of bounds after filtering
            currentPage = 1;
            return renderTable(tableBody, data, currentPage, itemsPerPage, type); // Re-render with page 1
        }
        
        paginatedItems.forEach(file => {
          const row = tableBody.insertRow();
          let fileNameCellContent = file.name;

          if (type === 'project') {
            const relativePath = getRelativePath(file.name, projectDrilldownPath.join('/'));
            const isDirectory = allFiles.some(f => f.name.startsWith(file.name + '/') && f.name !== file.name);
            
            if (isDirectory || (!relativePath.includes('/') && isPotentiallyProjectFolder(file.name))) {
              // Make folder names clickable for drilldown
              fileNameCellContent = `<a href="#" data-path="${file.name}" class="drilldown-link">${relativePath} (folder)</a>`;
            } else {
              fileNameCellContent = relativePath;
            }
          }

          row.innerHTML = `
            <td class="file-name">${fileNameCellContent}</td>
            <td>${(file.size / 1024).toFixed(2)}</td>
            <td>${file.percentage}%</td>
            <td>
              <div class="bar-container">
                <div class="bar ${type === 'deps' ? 'dependency-bar' : 'project-bar'}" style="width: ${file.percentage}%"></div>
              </div>
            </td>
          `;
        });
        if (type === 'deps') currentDepPage = currentPage;
        if (type === 'project') currentProjPage = currentPage;
      }

      function setupPagination(paginationContainer, totalItems, itemsPerPage, currentPage, type) {
        paginationContainer.innerHTML = '';
        const pageCount = Math.ceil(totalItems / itemsPerPage);
        if (pageCount <= 1) return;

        const prevButton = document.createElement('button');
        prevButton.textContent = 'Previous';
        prevButton.disabled = currentPage === 1;
        prevButton.addEventListener('click', () => {
          if (currentPage > 1) {
            applyFiltersAndRender(type, currentPage - 1);
          }
        });

        const nextButton = document.createElement('button');
        nextButton.textContent = 'Next';
        nextButton.disabled = currentPage === pageCount;
        nextButton.addEventListener('click', () => {
          if (currentPage < pageCount) {
            applyFiltersAndRender(type, currentPage + 1);
          }
        });
        
        const pageInfo = document.createElement('span');
        pageInfo.textContent = `Page ${currentPage} of ${pageCount}`;
        pageInfo.setAttribute('aria-live', 'polite'); // Announce page changes

        const itemsPerPageSelect = document.createElement('select');
        ITEMS_PER_PAGE_OPTIONS.forEach(opt => {
            const option = document.createElement('option');
            option.value = opt;
            option.textContent = `${opt} per page`;
            if (opt === itemsPerPage) option.selected = true;
            itemsPerPageSelect.appendChild(option);
        });
        itemsPerPageSelect.addEventListener('change', (e) => {
            if (type === 'deps') depItemsPerPage = parseInt(e.target.value);
            if (type === 'project') projItemsPerPage = parseInt(e.target.value);
            applyFiltersAndRender(type, 1); // Reset to page 1 on items per page change
        });

        paginationContainer.appendChild(prevButton);
        paginationContainer.appendChild(pageInfo);
        paginationContainer.appendChild(nextButton);
        paginationContainer.appendChild(itemsPerPageSelect);
      }
      
      function sortData(data, column, direction) {
          const sortedData = [...data].sort((a, b) => {
              let valA = a[column];
              let valB = b[column];

              if (column === 'size' || column === 'percentage') {
                  valA = parseFloat(valA);
                  valB = parseFloat(valB);
              } else { // name
                  valA = valA.toLowerCase();
                  valB = valB.toLowerCase();
              }

              if (valA < valB) return direction === 'asc' ? -1 : 1;
              if (valA > valB) return direction === 'asc' ? 1 : -1;
              return 0;
          });
          return sortedData;
      }

      function isPotentiallyProjectFolder(filePath) {
        // Heuristic: if it's in allFiles and other files start with its path + '/', it's a folder.
        // Or if it has no extension and is a top-level item.
        if (allFiles.some(f => f.name.startsWith(filePath + '/') && f.name !== filePath)) return true;
        // Basic check for common extensions - can be improved
        const commonExtensions = ['js', 'ts', 'jsx', 'tsx', 'css', 'html', 'json', 'md', 'map'];
        const parts = filePath.split('/').pop().split('.');
        if (parts.length > 1 && commonExtensions.includes(parts.pop().toLowerCase())) return false; // Has extension
        if (!filePath.includes('/') && projectDrilldownPath.length === 0) return true; // Top level, no extension
        return false;
      }

      function getRelativePath(fullPath, basePath) {
        if (basePath && fullPath.startsWith(basePath + '/')) {
          return fullPath.substring(basePath.length + 1);
        }
        return fullPath;
      }

      function updateProjectPathDisplay() {
        const currentPath = projectDrilldownPath.join('/');
        projectPathDisplay.textContent = currentPath ? `(${currentPath})` : '(Root)';
        projectBackBtn.style.display = projectDrilldownPath.length > 0 ? 'inline-block' : 'none';
      }

      function applyFiltersAndRender(type, page = null) {
        const searchTerm = searchInput.value.toLowerCase();
        let dataToRender;
        let tableBody;
        let paginationContainer;
        let itemsPerPage;
        let currentPage;
        let sortColumn;
        let sortDirection;

        if (type === 'deps') {
          dataToRender = allFiles.filter(f => f.isDependency);
          tableBody = depsTableBody;
          paginationContainer = depsPaginationContainer;
          itemsPerPage = depItemsPerPage;
          currentPage = page !== null ? page : currentDepPage;
          sortColumn = depSortColumn;
          sortDirection = depSortDirection;
        } else { // project
          dataToRender = allFiles.filter(f => !f.isDependency);
          tableBody = projectTableBody;
          paginationContainer = projectPaginationContainer;
          itemsPerPage = projItemsPerPage;
          currentPage = page !== null ? page : currentProjPage;
          sortColumn = projSortColumn;
          sortDirection = projSortDirection;
        }
        
        // Filter by search term
        if (searchTerm) {
          dataToRender = dataToRender.filter(file => file.name.toLowerCase().includes(searchTerm));
        }
        
        // Filter by project drilldown path for project files
        if (type === 'project') {
            const currentPathPrefix = projectDrilldownPath.join('/');
            if (projectDrilldownPath.length > 0) {
                // Show items directly under the current path
                dataToRender = dataToRender.filter(f => {
                    if (f.name.startsWith(currentPathPrefix + '/')) {
                        // Check if it's a direct child (not a grandchild)
                        const remainingPath = f.name.substring(currentPathPrefix.length + 1);
                        return !remainingPath.includes('/'); // Only direct children files/folders
                    }
                    return false;
                });
            } else {
                // At root, show top-level folders and files
                dataToRender = dataToRender.filter(f => {
                    const segments = f.name.split('/');
                    if (segments.length === 1) return true; // Root file or folder
                    // Check if it's a recognized top-level like packages/name, apps/name, src/name
                    if ((segments[0] === 'packages' || segments[0] === 'apps' || segments[0] === 'src') && segments.length === 2) return true;
                    // Heuristic: if other files start with this path, it's a top-level folder we should show
                    if (isPotentiallyProjectFolder(f.name) && !f.name.includes('/')) return true;
                    return false; // By default, hide deeper paths at root unless they are single segment
                }).filter((value, index, self) => {
                    // Filter out duplicates that might arise from the logic above (e.g. src/utils and utils if src is drilldown path)
                    // A bit of a hacky distinct for now based on what the relative path would be
                    const nameToDisplay = getRelativePath(value.name, currentPathPrefix);
                    return self.findIndex(s => getRelativePath(s.name, currentPathPrefix) === nameToDisplay) === index;
                });
            }
        }
        
        // Sort data
        dataToRender = sortData(dataToRender, sortColumn, sortDirection);

        // Update total counts for badges after filtering (optional, or keep original counts)
        if (type === 'deps') document.querySelector('#dependenciesSection .section-badge').textContent = `${dataToRender.length} files`;
        if (type === 'project') document.querySelector('#projectFilesSection .section-badge').textContent = `${dataToRender.length} files`;

        renderTable(tableBody, dataToRender, currentPage, itemsPerPage, type);
        setupPagination(paginationContainer, dataToRender.length, itemsPerPage, currentPage, type);

        if (type === 'project') {
            updateProjectPathDisplay();
        }
      }

      searchInput.addEventListener('input', () => {
        applyFiltersAndRender('deps', 1); // Reset to page 1 on search
        applyFiltersAndRender('project', 1);
      });
      
      // Sorting listeners
      document.querySelectorAll('#dependenciesTable th[data-sort]').forEach(th => {
          th.addEventListener('click', () => {
              const newSortColumn = th.dataset.sort;
              if (depSortColumn === newSortColumn) {
                  depSortDirection = depSortDirection === 'asc' ? 'desc' : 'asc';
              } else {
                  depSortColumn = newSortColumn;
                  depSortDirection = 'asc'; // Default to asc for new column
              }
              applyFiltersAndRender('deps', 1);
          });
      });
      document.querySelectorAll('#projectFilesTable th[data-sort]').forEach(th => {
          th.addEventListener('click', () => {
              const newSortColumn = th.dataset.sort;
              if (projSortColumn === newSortColumn) {
                  projSortDirection = projSortDirection === 'asc' ? 'desc' : 'asc';
              } else {
                  projSortColumn = newSortColumn;
                  projSortDirection = 'asc';
              }
              applyFiltersAndRender('project', 1);
          });
      });

      // Toggle sections
      document.querySelectorAll('.toggle-section').forEach(button => {
        button.addEventListener('click', function() {
          const targetTableId = this.dataset.target;
          const table = document.getElementById(targetTableId);
          const pagination = table.nextElementSibling; // Assuming pagination is right after
          if (table) {
            const isHidden = table.style.display === 'none';
            table.style.display = isHidden ? '' : 'none';
            if(pagination && pagination.classList.contains('pagination-controls')) {
                 pagination.style.display = isHidden ? '' : 'none';
            }
            this.textContent = isHidden ? 'Hide' : 'Show';
            this.setAttribute('aria-expanded', isHidden);
          }
        });
        // Set initial ARIA state
        const targetTableId = button.dataset.target;
        const table = document.getElementById(targetTableId);
        button.setAttribute('aria-expanded', table.style.display !== 'none');

      });
      
      // Add event listener for project file drilldown
      projectTableBody.addEventListener('click', (e) => {
        if (e.target.tagName === 'A' && e.target.classList.contains('drilldown-link')) {
          e.preventDefault();
          const drillPath = e.target.dataset.path;
          projectDrilldownPath = drillPath.split('/');
          applyFiltersAndRender('project', 1);
        }
      });

      projectBackBtn.addEventListener('click', () => {
        if (projectDrilldownPath.length > 0) {
          projectDrilldownPath.pop(); // Go up one level
          applyFiltersAndRender('project', 1);
        }
      });

      // Initial render
      applyFiltersAndRender('deps', 1);
      applyFiltersAndRender('project', 1);
      updateProjectPathDisplay(); // Call after initial render of project files
    });
  </script>
</body>
</html> 
