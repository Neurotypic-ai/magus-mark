---
description: Command Line Tool architecture and implementation for Obsidian Magic
globs: **/cli/**/*.ts,**/bin/**/*.ts,**/commands/**/*.ts
alwaysApply: false
---

# Command Line Tool

## Modern TypeScript CLI Architecture

The CLI tool uses carefully selected dependencies to balance functionality with maintainability:

- **Core Technologies**: TypeScript, Node.js, OpenAI SDK
- **Essential Dependencies**: yargs, dotenv, ora, cli-progress, chalk, boxen, conf, tokenizers, zod, inquirer, cosmiconfig, fs-extra
- **Development Dependencies**: tsx, vitest, typescript-eslint, prettier, tsup

## Intelligent Workflow Orchestration

The CLI implements a sophisticated workflow engine with multiple operating modes:

1. **Processing Modes**: Auto, Interactive, and Differential modes for different needs
2. **Concurrency Management**: Adaptive processing with rate limiting and quota handling
3. **Queue Management**: Priority-based queue with session persistence and checkpoint recovery
4. **Content-based Selection**: Process files based on content criteria and frontmatter conditions

## Advanced Cost Management System

The CLI implements a sophisticated cost management and estimation system:

1. **Precise Token Estimation**: Using OpenAI's official tokenizer for accurate counts
2. **Real-time Monitoring**: Tracking usage against budget with visualization
3. **Model Selection**: Intelligent model recommendations based on task characteristics
4. **Token Optimization**: Extracting key segments to reduce token usage

## Rich Interactive UI

The CLI provides an engaging interactive user experience:

1. **Progress Visualization**: Multi-bar progress indicators and elegant spinners
2. **Interactive Tag Editing**: Review and modify generated tags with confidence scores
3. **Keyboard Controls**: Direct user control with customizable key bindings
4. **Rich Data Display**: Visually appealing statistics and summaries

## Comprehensive Error Handling

The CLI implements robust error management:

1. **Typed Error Hierarchy**: Specific error types for different scenarios
2. **Graceful Degradation**: Fallback mechanisms for API failures
3. **Recovery Options**: Session persistence and resumable processing
4. **Preflight Validation**: Extensive validation before processing starts

## Flexible Configuration System

The CLI provides a layered configuration approach:

1. **Multiple Sources**: Command-line, environment variables, config files, profiles
2. **Type-Safe Validation**: Schema-based configuration validation 
3. **Configuration Profiles**: Named presets for different use cases
4. **Dynamic Settings**: Context-aware configuration with JavaScript support

## Benchmarking System

The CLI includes comprehensive benchmarking capabilities:

1. **Model Comparison**: Side-by-side evaluation of different models
2. **Accuracy Metrics**: Precision, recall, and F1-score measurements
3. **Performance Analysis**: Cost and token usage optimization
4. **Custom Scenarios**: Specialized test suites for different contexts

## Command Structure

The CLI implements a comprehensive command structure with nested commands:

```bash
# Tag conversations
tag-conversations tag [paths...] [options]

# Run tests and benchmarks
tag-conversations test [options]

# Manage configuration
tag-conversations config [command] [options]

# View statistics and reports
tag-conversations stats [options]

# Taxonomy management
tag-conversations taxonomy [command] [options]
```

## Yargs Implementation

The CLI leverages Yargs for a professional command-line experience:

1. **Type-safe Commands**: Strongly typed command and option definitions
2. **Middleware Support**: Cross-cutting concerns like authentication and validation
3. **Progressive Disclosure**: Hiding complex options until needed
4. **Auto-completion**: Shell completion for commands and arguments

## Documentation Links

- [CLI Overview](mdc:documentation/cli/cli-overview.md)
- [Command Structure](mdc:documentation/cli/command-structure.md)
- [Workflow Orchestration](mdc:documentation/cli/workflow-orchestration.md)
- [Cost Management](mdc:documentation/cli/cost-management.md)
- [Benchmarking Capabilities](mdc:documentation/cli/benchmarking.md)
- [Yargs Implementation](mdc:documentation/cli/yargs-implementation.md)
- [Error Handling](mdc:documentation/cli/error-handling.md)
- [Interactive UI](mdc:documentation/cli/interactive-ui.md)
- [Configuration Reference](mdc:documentation/cli/configuration-reference.md)