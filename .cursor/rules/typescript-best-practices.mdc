---
description: TypeScript best practices and coding standards
globs: **/*.ts,**/*.tsx
alwaysApply: true
---
# TypeScript Best Practices

## Main Rules

- Never disable eslint errors under any circumstances

## Project Configuration

This project uses:
- TypeScript 5.8+ with strict settings
- ESLint flat config with typescript-eslint
- Prettier with import sorting
- React with JSX (react-jsx transform)
- Nx build system with inferred targets

Always follow these configurations when generating code.

## Code Style Requirements

1. **Formatting**:
   - 120 character line width
   - 2-space indentation
   - Single quotes for strings
   - Semicolons required
   - Trailing commas in multiline objects/arrays
   - No tabs, only spaces

2. **Import Organization**:
   - Sort imports in this order:
     1. Node.js built-ins (`node:*`)
     2. React imports
     3. Third-party modules
     4. Project modules (`@obsidian-magic/*`)
     5. Relative imports (`./*`, `../*`)
     6. Type imports
   - Use type-only imports: `import type { MyType } from './types';`
   - Always use named imports (avoid default imports)

3. **Naming Conventions**:
   - PascalCase for types, interfaces, classes, React components
   - camelCase for variables, functions, properties, methods
   - UPPER_CASE for constants
   - Avoid Hungarian notation
   - **NO index.ts files** except at package roots

## Type Safety

1. **Type Declarations**:
   ```typescript
   // ❌ NEVER use `any`
   function processItem(item: any): any { /* ... */ }
   
   // ✅ Use specific types or `unknown` with narrowing
   function processItem(item: unknown): Result<ProcessedItem> {
     if (!isValidItem(item)) {
       return Result.fail(new ValidationError('Invalid item'));
     }
     // Now TypeScript knows item is ValidItem
     return Result.ok(process(item));
   }
   ```

2. **Type Guards**:
   ```typescript
   // ✅ Create proper type guards 
   function isValidItem(item: unknown): item is ValidItem {
     return (
       typeof item === 'object' && 
       item !== null && 
       'id' in item && 
       typeof item.id === 'string'
     );
   }
   ```

3. **Nullability**:
   ```typescript
   // ❌ NEVER use non-null assertions (!)
   const value = maybeUndefined!.property;
   
   // ✅ Use optional chaining and nullish coalescing
   const value = maybeUndefined?.property ?? defaultValue;
   
   // ✅ Use early returns with type narrowing
   if (maybeUndefined === undefined) {
     return Result.fail(new Error('Value is undefined'));
   }
   const value = maybeUndefined.property;
   ```

4. **Discriminated Unions**:
   ```typescript
   // ✅ Use discriminated unions for state
   type RequestState<T> = 
     | { status: 'idle' }
     | { status: 'loading' }
     | { status: 'error'; error: Error }
     | { status: 'success'; data: T };
   
   // ✅ Use exhaustive checking with switch
   function handleState<T>(state: RequestState<T>) {
     switch(state.status) {
       case 'idle': return renderIdle();
       case 'loading': return renderLoading();
       case 'error': return renderError(state.error);
       case 'success': return renderSuccess(state.data);
       default: {
         // Exhaustiveness check
         const _exhaustiveCheck: never = state;
         return null;
       }
     }
   }
   ```

5. **Handling Error Types Safely**:
   ```typescript
   // ❌ AVOID: Unsafe member access on error types
   try {
     // something
   } catch (err) {
     console.log(err.message); // Unsafe member access
   }
   
   // ✅ USE: Proper error type narrowing
   try {
     // something
   } catch (err) {
     const error = toAppError(err);
     console.log(error.message);
   }
   
   // ✅ BETTER: Use Result pattern to avoid exception handling
   const result = doSomething();
   if (result.isErr()) {
     const error = result.error;
     console.log(error.message);
   }
   ```

6. **Variable Declaration and Usage**:
   ```typescript
   // ❌ AVOID: Unused variables
   function process(data: Data) {
     const helper = new Helper(); // ESLint: 'helper' is defined but never used
     return data.value;
   }
   
   // ✅ USE: Only declare variables you need
   function process(data: Data) {
     return data.value;
   }
   
   // If you must keep the variable for future use:
   function process(data: Data) {
     // eslint-disable-next-line @typescript-eslint/no-unused-vars
     const helper = new Helper(); // Will be used in future implementation
     return data.value;
   }
   ```

## Error Handling

Always use the Result pattern for operations that can fail:

```typescript
import { Result, ValidationError, toAppError } from '@obsidian-magic/core';

// ✅ Return Result instead of throwing
function processData(input: unknown): Result<ProcessedData> {
  // Validate input first
  if (!isValidInput(input)) {
    return Result.fail(new ValidationError('Invalid input', { field: 'input' }));
  }
  
  try {
    const processed = process(input as ValidInput);
    return Result.ok(processed);
  } catch (err) {
    return Result.fail(toAppError(err));
  }
}

// ✅ Chain Results using andThen
async function processThenSave(input: unknown): Promise<Result<SavedData>> {
  return processData(input)
    .andThen(data => saveData(data))
    .andThen(savedId => loadSavedData(savedId));
}
```

## React Patterns

```typescript
// ✅ Proper React component with typed props
interface ButtonProps {
  label: string;
  onClick?: () => void;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
}

// Use React.FC only when needed for generic components
function Button({ 
  label, 
  onClick, 
  variant = 'primary', 
  disabled = false 
}: ButtonProps) {
  return (
    <button
      className={`btn btn-${variant}`}
      onClick={onClick}
      disabled={disabled}
      type="button"
    >
      {label}
    </button>
  );
}

// ✅ Use type inference with useState when possible
function Counter() {
  // Type inference works fine here
  const [count, setCount] = useState(0);
  
  // Explicitly type complex state
  const [state, setState] = useState<RequestState<Data>>({ status: 'idle' });

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(prev => prev + 1)}>Increment</button>
    </div>
  );
}
```

## Testing Patterns

When writing tests, follow these patterns:

```typescript
// ✅ Import appropriate testing libraries
import { describe, it, expect, vi } from 'vitest';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';

// For VS Code tests with Mocha
// import { describe, it } from 'mocha';
// import { expect } from 'chai';
// import * as sinon from 'sinon';

// ✅ Properly type mocks
const mockFn = vi.fn<[string], number>();
const mockService = {
  getData: vi.fn<[], Promise<Data>>().mockResolvedValue({ id: '1' }),
};

// For VS Code tests with Sinon
// const mockFn = sinon.stub().returns(42);
// const mockService = {
//   getData: sinon.stub().resolves({ id: '1' })
// };

// ✅ Use proper assertions
describe('Component', () => {
  it('renders correctly', () => {
    render(<Component prop="value" />);
    
    expect(screen.getByText('Expected Text')).toBeInTheDocument();
    expect(screen.queryByText('Should Not Exist')).not.toBeInTheDocument();
  });
  
  it('handles async operations', async () => {
    render(<AsyncComponent />);
    
    expect(screen.getByText('Loading...')).toBeInTheDocument();
    
    await waitFor(() => {
      expect(screen.getByText('Data Loaded')).toBeInTheDocument();
    });
    
    expect(mockService.getData).toHaveBeenCalledTimes(1);
  });
});
```

## Common Mistakes to Avoid

1. **Empty Arrays/Objects**:
   ```typescript
   // ❌ AVOID: Untyped empty arrays
   const items = [];
   
   // ✅ USE: Explicitly typed empty arrays
   const items: string[] = [];
   ```

2. **Promises**:
   ```typescript
   // ❌ AVOID: Unhandled promises
   async function getData() {
     const data = await fetchData();
     return data.value; // What if fetchData throws?
   }
   
   // ✅ USE: Proper error handling with Result
   async function getData(): Promise<Result<Value>> {
     return Result.fromPromise(
       fetchData(),
       err => toAppError(err)
     ).andThen(data => Result.ok(data.value));
   }
   ```

3. **React Hooks**:
   ```typescript
   // ❌ AVOID: useState without appropriate typing
   const [data, setData] = useState();
   
   // ✅ USE: Explicitly typed state
   const [data, setData] = useState<Data | null>(null);
   ```

4. **Test-Specific Issues**:
   ```typescript
   // ❌ AVOID: Untyped test mocks
   const mockFn = vi.fn(); // Type is () => any
   
   // ✅ USE: Properly typed mocks
   const mockFn = vi.fn<[string], number>(); // Takes string, returns number
   
   // ❌ AVOID: Accessing properties on error objects directly
   expect(mockFn).toHaveBeenCalledWith(error.someProperty);
   
   // ✅ USE: Type-safe error handling in tests
   if (result.isErr()) {
     const error = result.error;
     expect(error).toBeInstanceOf(ValidationError);
     expect(mockFn).toHaveBeenCalledWith(error.message);
   }
   ```

5. **Unsafe Member Access**:
   ```typescript
   // ❌ AVOID: Unsafe member access on unknown objects
   function process(obj: unknown) {
     console.log(obj.property); // Error: obj is of type 'unknown'
   }
   
   // ✅ USE: Type guards before accessing properties
   function process(obj: unknown) {
     if (isValidObject(obj)) {
       // TypeScript now knows obj has property
       console.log(obj.property);
     }
   }
   ```

6. **Floating Promises**:
   ```typescript
   // ❌ AVOID: Unhandled promise (floating promise)
   function handleClick() {
     fetchData(); // Promise not awaited or caught
   }
   
   // ✅ USE: Properly handled promises
   async function handleClick() {
     try {
       await fetchData();
     } catch (err) {
       handleError(err);
     }
   }
   
   // Or if you intentionally don't want to wait:
   function handleClick() {
     void fetchData().catch(handleError);
   }
   ```

Reference the project configurations:
- [TypeScript Base Config](mdc:config/typescript/base.json)
- [ESLint Config](mdc:config/eslint/base.js)
- [Prettier Config](mdc:prettier.config.js)