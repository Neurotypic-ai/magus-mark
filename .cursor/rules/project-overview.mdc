---
description: Project overview and architecture information for Obsidian Magic
globs: **/*.ts,**/*.tsx,**/*.md
alwaysApply: true
---
# Obsidian Magic Project Structure

## Project Overview

Obsidian Magic is a tool for organizing large quantities of markdown files and tagging them using [Obsidian](https://obsidian.md). The core functionality is an AI-powered tagging system that analyzes conversations and applies a consistent set of tags to make them easier to search, navigate, and understand.

## Repository Structure

The project uses a modern TypeScript (5.8.3) workspace with pnpm, Nx build system, ESLint flat config, and project references:

```
obsidian-magic/
├── apps/                    # Application implementations
│   ├── cli/                 # Command-line application
│   ├── obsidian-plugin/     # Obsidian plugin
│   └── vscode/              # VS Code extension
├── packages/                # Shared packages (publishable)
│   ├── core/                # Core library package
├── config/                  # Centralized configuration files
│   ├── typescript/          # TypeScript configuration templates
│   ├── eslint/              # ESLint configuration templates
│   └── vitest/              # Vitest configuration templates
├── documentation/           # Project documentation
└── prompts/                 # OpenAI prompt templates
```

## Service Instantiation & Layered Architecture
- All business logic is encapsulated in stateless, constructor-injected service classes; no singletons or global registries.
- **Core Layer** (`@obsidian-magic/core`): Pure, platform-agnostic logic for tag graph construction, frontmatter parsing, and file processing.
- **Adapter Layer** (Obsidian, CLI, VSCode): Transforms platform-specific I/O (vault, filesystem, metadata) into core data structures and functions.
- **UI/UX Handler Layer** (Obsidian Plugin): Dedicated handler classes (e.g., `StatusBarHandler`, `NoticeHandler`) subscribe to service observables and update the UI.
- Services expose observables (e.g., status$, progress$, results$) for UI state propagation and progress updates.
- This layered design enables robust testability: core logic is tested in isolation, adapters are mocked per platform, and UI handlers accept mock UI objects and assert on observable emissions.

## Workspace Architecture

The project implements a modular workspace architecture with the following components:

- **Core Package**: Contains all shared business logic
  - Tag classification engines
  - OpenAI API integration
  - Markdown parsing and manipulation
  - Shared utilities and helpers
  - Error handling with Result pattern
  - Configuration management

- **CLI App**: Command-line interface implementation
  - Command structure with Yargs integration
  - Workflow orchestration and concurrency management
  - Interactive UI with rich visualizations
  - Cost management and token optimization
  - Benchmarking and performance analysis
  - Comprehensive error handling and recovery

- **Obsidian Plugin App**: Obsidian-specific implementation
  - Plugin registration and lifecycle management
  - Obsidian UI integration components
  - Vault access and file manipulation
  - Settings management

- **VS Code Extension App**: VS Code-specific implementation
  - Extension activation and registration
  - VS Code UI components and views
  - Cursor-specific integration with MCP server
  - Model Context Protocol (MCP) servers
  - Bidirectional vault synchronization
  - AI-assisted tagging and knowledge retrieval

## Build System

The project uses an Nx-based build system with inferred targets:

- **Nx Workspace**: Coordinates builds, tests, and other operations
- **TypeScript Project References**: Enables incremental builds and proper dependency tracking
- **Centralized Configuration**: Shared configs in the `config/` directory
- **ESLint Flat Config**: Modern ESLint configuration with TypeScript integration
- **Git Hooks**: Husky, lint-staged, and commitlint for code quality
- **Standardized Scripts**: Consistent commands across packages

## Testing Approach

The project implements a comprehensive testing strategy:

- **Vitest**: Primary framework for most packages
- **Mocha**: Used for VS Code integration tests (migration in progress for VS Code unit tests)
- **Co-located Tests**: Tests located alongside the code they test
- **Organized Mocks**: Dedicated mock files for complex dependencies
- **Shared Testing Utilities**: Common mock factories and testing helpers

## Implementation Guides

For more detailed implementation information, refer to these specialized guides:

- [Build System](mdc:.cursor/rules/build-system.mdc)
- [Testing Strategy](mdc:.cursor/rules/testing-strategy.mdc)
- [Error Handling](mdc:.cursor/rules/error-handling.mdc)
- [TypeScript Best Practices](mdc:.cursor/rules/typescript-best-practices.mdc)
- [API Integration](mdc:.cursor/rules/api-integration.mdc)
- [Accessibility & UX](mdc:.cursor/rules/accessibility-ux.mdc)
- [VS Code Integration](mdc:.cursor/rules/vscode-integration.mdc)
- [CLI Tool](mdc:.cursor/rules/cli-tool.mdc)

## Documentation Links

- [Project Structure](mdc:documentation/implementation/project-structure.md)
- [Core Tagging Model](mdc:documentation/core/tagging-model.md)
- [OpenAI Integration](mdc:documentation/core/openai-integration.md)

### CLI Documentation
- [CLI Overview](mdc:documentation/cli/cli-overview.md)
- [Command Structure](mdc:documentation/cli/command-structure.md)
- [Workflow Orchestration](mdc:documentation/cli/workflow-orchestration.md)
- [Cost Management](mdc:documentation/cli/cost-management.md)
- [Yargs Implementation](mdc:documentation/cli/yargs-implementation.md)
- [Error Handling](mdc:documentation/cli/error-handling.md)
- [Benchmarking](mdc:documentation/cli/benchmarking.md)
- [Interactive UI](mdc:documentation/cli/interactive-ui.md)
- [Configuration Reference](mdc:documentation/cli/configuration-reference.md)

### Application Documentation
- [Obsidian Plugin](mdc:documentation/obsidian-plugin/plugin-overview.md)
- [VS Code Integration](mdc:documentation/vscode-integration/vscode-overview.md)