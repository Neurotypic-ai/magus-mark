---
description: Build system configuration and practices for Obsidian Magic
globs: **/webpack.config.js,**/tsconfig*.json,**/scripts/**/*.ts
alwaysApply: false
---

# Build System

The project uses a modern Nx-based workspace with TypeScript project references for efficient builds:

## Workspace Structure

- **pnpm Workspace**: Manages dependencies across multiple packages
- **Nx Build System**: Coordinates builds, tests, and other operations using inferred targets
- **TypeScript Project References**: Enables incremental builds and proper dependency tracking
- **ESLint Flat Config**: Single configuration file for consistent linting across the workspace
- **Prettier**: Consistent code formatting across all packages
- **Centralized Configuration**: Shared configurations in the `config/` directory

## Nx Implementation

The project uses Nx with inferred targets:

- **Automatic Project Discovery**: No explicit project definitions in `nx.json`
- **Target Defaults**: Common build, test, and lint configurations defined in `nx.json`
- **Dependency Management**: Builds respect project dependencies via `targetDefaults`
- **Task Caching**: Improved build performance with Nx caching

## Centralized Configuration Structure

```
obsidian-magic/
├── config/
│   ├── typescript/
│   │   ├── base.json           # Base TypeScript configuration
│   │   ├── library.json        # Library-specific configuration
│   │   └── test.json           # Test-specific configuration
│   ├── eslint/
│   │   ├── base.js             # Base ESLint configuration
│   │   └── react.js            # React-specific rules
│   └── vitest/
│       ├── base.ts             # Base Vitest configuration
│       └── react.ts            # React-specific test config
```

## TypeScript Configuration

The project uses a hierarchical TypeScript configuration:

```
obsidian-magic/
├── tsconfig.base.json          # Base compiler options shared by all projects
├── tsconfig.json               # Root configuration with project references
├── apps/
│   ├── cli/
│   │   ├── tsconfig.json       # CLI-specific configuration
│   │   ├── tsconfig.lib.json   # Production build configuration
│   │   └── tsconfig.test.json  # Test-specific configuration
│   ├── obsidian-plugin/
│   │   ├── tsconfig.json       # Plugin-specific configuration
│   │   ├── tsconfig.lib.json   # Production build configuration
│   │   └── tsconfig.test.json  # Test-specific configuration
│   └── vscode/
│       ├── tsconfig.json       # VS Code extension configuration
│       ├── tsconfig.lib.json   # Production build configuration
│       └── tsconfig.test.json  # Test-specific configuration
└── packages/
    ├── core/
    │   ├── tsconfig.json       # Core package configuration
    │   ├── tsconfig.lib.json   # Production build configuration
    │   └── tsconfig.test.json  # Test-specific configuration
    ├── types/
    │   ├── tsconfig.json       # Types package configuration
    │   ├── tsconfig.lib.json   # Production build configuration
    │   └── tsconfig.test.json  # Test-specific configuration
    └── utils/
        ├── tsconfig.json       # Utils package configuration
        ├── tsconfig.lib.json   # Production build configuration
        └── tsconfig.test.json  # Test-specific configuration
```

Each package's configuration extends the centralized base configs and adds package-specific settings.

## Build Commands

Common build commands using Nx:

- **Build all packages and applications**: `nx run-many --target=build`
- **Build specific project**: `nx build <project-name>`
- **Build only applications**: `nx run-many --target=build --projects=tag:app`
- **Build only packages**: `nx run-many --target=build --projects=tag:package`
- **Watch mode**: `nx run-many --target=dev`
- **Clean all**: `nx run-many --target=clean`

## Dependency Management

pnpm is used for dependency management with workspace protocol linking:

- Root package.json contains development dependencies
- Each package/app has its own package.json with specific dependencies
- Shared packages are referenced using workspace: protocol
- Version management is enforced through pnpm workspace

## Package Generators

Nx generators are available for creating new packages and components:

- **Create new library**: `nx g library <library-name>`
- **Create new application**: `nx g application <app-name>`
- **Project templates**: Configured for CLI, Obsidian plugin, and VS Code extension

## Git Hooks

The project uses Git hooks for code quality enforcement:

- **Husky**: Manages Git hooks
- **lint-staged**: Runs linters on staged files
- **commitlint**: Enforces commit message conventions
- **Pre-commit**: Runs linting and formatting
- **Pre-push**: Runs tests

## Related Documentation

For detailed information on specific implementation aspects, refer to these additional documents:

- [Project Structure](mdc:documentation/implementation/project-structure.md)
- [Testing Strategy](mdc:.cursor/rules/testing-strategy.mdc)
- [TypeScript Best Practices](mdc:.cursor/rules/typescript-best-practices.mdc) 