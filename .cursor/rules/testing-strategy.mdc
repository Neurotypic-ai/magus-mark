---
description: Testing strategies and approaches for Obsidian Magic
globs: **/*.test.ts,**/*.spec.ts,**/vitest.config.*
alwaysApply: false
---

# Testing Strategy

The project implements a comprehensive testing strategy primarily using Vitest, with Mocha for VS Code extension integration tests:

## Test Organization

We use co-located tests, placing test files directly alongside the source code they test:

```
obsidian-magic/
├── apps/
│   ├── cli/
│   │   └── src/
│   │       └── commands/
│   │           ├── tag-command.ts
│   │           └── tag-command.test.ts    # Test alongside implementation
│   ├── obsidian-plugin/
│   │   └── src/
│   │       ├── services/
│   │       │   ├── tagging-service.ts
│   │       │   └── tagging-service.test.ts
│   │       └── ui/
│   │           ├── components/
│   │           │   ├── TagEditor.tsx
│   │           │   └── TagEditor.test.tsx
│   └── vscode/
│       └── src/
│           ├── extension.ts
│           ├── extension.test.ts           # Mocha integration test
│           └── commands/
│               ├── tag-command.ts
│               └── tag-command.test.ts     # Currently Vitest unit test
├── packages/
│   ├── core/
│   │   └── src/
│   │       ├── tagging/
│   │       │   ├── classifier.ts
│   │       │   └── classifier.test.ts     # Test alongside code
│   │       ├── openai/
│   │       │   ├── client.ts
│   │       │   └── client.test.ts
│   │       └── integration.test.ts        # Integration tests near related code
│   ├── testing/ # Shared testing utilities
│   ├── types/
│   └── utils/
└── vitest.workspace.js # Workspace configuration
```

## VS Code Integration

We use VS Code file nesting to keep the explorer view clean while maintaining the co-location approach:

```json
"explorer.fileNesting.enabled": true,
"explorer.fileNesting.patterns": {
  "*.ts": "${capture}.test.ts, ${capture}.spec.ts, ${capture}.d.ts"
}
```

This visually groups test files with their source files in the explorer.

## Testing Framework Configuration

### Vitest (Primary Framework)

Most packages use Vitest with a workspace configuration:

```javascript
// vitest.workspace.js
import { defineWorkspace } from 'vitest/config'

export default defineWorkspace([
  "./packages/*/vitest.config.ts",
  "./apps/*/vitest.config.ts",
])
```

Each package and app has its own `vitest.config.ts` extending centralized base configuration:

```typescript
// apps/cli/vitest.config.ts
import { defineConfig, mergeConfig } from 'vitest/config';
import baseConfig from '../../config/vitest/base';

export default mergeConfig(baseConfig, defineConfig({
  test: {
    // Package-specific overrides
    environment: 'node',
    include: ['**/*.{test,spec}.{ts,tsx}']
  }
}));
```

### Mocha (VS Code Integration Tests)

VS Code integration tests use Mocha with the `@vscode/test-electron` runner:

```javascript
// .mocharc.js
module.exports = {
  require: 'tsx',
  spec: ['src/**/*.test.ts'],
  timeout: 60000,
  ui: 'bdd'
};
```

This configuration is used for VS Code integration tests. A migration is in progress to move VS Code unit tests from Vitest to Mocha for consistency.

## Unit Tests

- Component-level tests with Vitest (in most packages) and Mocha (in VS Code)
- Mocked dependencies via appropriate mocking library (Vitest: `vi.mock()`, Mocha: `sinon`)
- High coverage of core business logic
- Consistent use of `describe`/`it` blocks for organization
- Type-safe testing with TypeScript
- Organized mock files in dedicated directories for complex mocks

## Integration Tests

- Cross-component integration testing
- API interaction testing with mocked responses
- File system operation testing with mocked file system
- Testing service composition and interaction
- VS Code extension activation testing with `@vscode/test-electron`

## End-to-End Tests

- CLI workflow testing
- Plugin installation and operation testing
- Extension activation and operation testing
- Controlled API testing

## Mocking Strategy

### Vitest Mocking

For packages using Vitest, we use its built-in mocking capabilities:

```typescript
// Mock fs-extra module
vi.mock('fs-extra', () => ({
  ensureDir: vi.fn(),
  readFile: vi.fn(),
  writeFile: vi.fn(),
  access: vi.fn(),
  readdir: vi.fn(),
  stat: vi.fn(),
  unlink: vi.fn()
}));

// Mock a custom module
vi.mock('../logger', () => ({
  logger: {
    info: vi.fn(),
    warn: vi.fn(),
    error: vi.fn(),
    debug: vi.fn(),
    configure: vi.fn()
  }
}));
```

### Mocha/Sinon Mocking (VS Code)

For VS Code tests using Mocha, we use Sinon for mocking:

```typescript
import * as sinon from 'sinon';
import * as fs from 'fs-extra';

// Create stubs
const readFileStub = sinon.stub(fs, 'readFile')
  .resolves('file contents');

// Reset stubs after test
afterEach(() => {
  sinon.restore();
});
```

### Organized Mock Files

Complex mocks are now organized into dedicated files:

```
src/
├── __mocks__/
│   ├── fs-extra.ts
│   ├── logger.ts
│   └── openai.ts
└── services/
    ├── __mocks__/
    │   └── tagging-service.ts
    └── tagging-service.ts
```

This approach encourages reuse and consistency in mocking.

### Service Mocking

We use dependency injection and the shared testing package for consistent mocks:

```typescript
import { createMockTagSet, createMockOpenAIConfig } from '@obsidian-magic/testing';

// Create consistent mock data
const mockTagSet = createMockTagSet({
  year: '2024',
  conversation_type: 'theoretical'
});

// Create service with mocked dependencies
const service = createTaggingService({
  openAIConfig: createMockOpenAIConfig(),
  // Other dependencies
});
```

## Shared Testing Utilities

We maintain a dedicated `@obsidian-magic/testing` package for:

- Factory functions for test data
- Mock service implementations
- Utility functions for test setup
- Shared fixtures and helpers
- Logger mocks for consistent log capture and verification

This promotes consistency and reduces duplication across tests.

## VS Code Test Migration (Vitest to Mocha)

A migration is in progress to consolidate VS Code testing into Mocha:

- **Current Status**: VS Code integration tests use Mocha, unit tests use Vitest
- **Migration Goal**: Standardize all VS Code tests to use Mocha with Sinon for mocking
- **Completed Steps**:
  - Inventory of existing tests
  - Configuration setup for Mocha in VS Code package
  - Selection of supporting libraries (Sinon, Chai)
  - Dependency and TypeScript configuration updates
- **Remaining Steps**:
  - Convert Vitest unit tests to Mocha/Sinon
  - Update CI workflows to use unified test command
  - Validate all tests passing with new framework

## Testing Best Practices

1. **Structure and Organization**:
   - Use descriptive test names that explain behavior
   - Follow AAA pattern (Arrange, Act, Assert)
   - Group related tests in `describe` blocks
   - Keep tests independent and idempotent
   - Co-locate tests with the code they test

2. **Mocking Strategy**:
   - Use appropriate mocking library for the framework (Vitest: `vi.mock()`, Mocha: `sinon`)
   - Reset mocks between tests
   - Use organized mock files for complex mocks
   - Use the testing package for consistent mock data
   - Prefer dependency injection for easier component testing

3. **Assertions**:
   - Write focused assertions for specific behaviors
   - Test edge cases and error conditions
   - Use type-safe assertions with TypeScript
   - Properly test `Result` pattern returns
   - Avoid testing implementation details when possible

4. **Test Performance**:
   - Keep tests fast and efficient
   - Minimize unnecessary setup/teardown
   - Use mocks instead of real APIs for faster tests
   - Isolate slow tests when necessary

5. **Coverage Goals**:
   - Aim for >80% coverage of core business logic
   - Prioritize critical path coverage
   - Track coverage over time in CI

## Running Tests

To run tests:

- All tests: `nx run-many --target=test` (runs tests in all packages)
- Single package: `nx test <package-name>` (e.g., `nx test core`)
- VS Code tests: `nx test vscode` (runs both Mocha integration tests and current Vitest unit tests)
- Watch mode: `nx test <package-name> --watch`
- Coverage: `nx test <package-name> --coverage` 