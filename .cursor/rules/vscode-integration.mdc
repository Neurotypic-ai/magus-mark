---
description: VS Code and Cursor integration guidelines and best practices
globs: **/vscode/**/*.ts,**/vscode/**/*.tsx,**/cursor/**/*.ts,**/cursor/**/*.tsx
alwaysApply: false
---

# VS Code & Cursor Integration

## Extension Architecture

The VS Code extension uses a component-based architecture:

### Core Components

1. **Extension Activation**
   - Entry point: `extension.ts`
   - Dependency initialization
   - Command registration
   - View registration
   - Context subscriptions

2. **Command Handlers**
   - Discrete command implementations
   - Clear separation of concerns
   - Command context awareness
   - Result pattern for error handling

3. **View Providers**
   - WebView implementation
   - Tree View providers
   - Custom editor providers
   - Message passing protocols

4. **API Integration**
   - Workspace document processing
   - OpenAI integration via core package

5. **Configuration**
   - VS Code settings integration
   - Secure secrets storage
   - User preferences management

6. **Model Context Protocol (MCP) Server**
   - Framework for stateful LLM interactions
   - Extensible tool registration
   - Context window management
   - Prompt engineering utilities
   - Secure token handling

## Extension Capabilities

The extension provides several capabilities:

1. **Tag Management**
   - Manual tag editing
   - AI-powered tag suggestion
   - Tag visualization
   - Tag filtering and searching

2. **Content Processing**
   - Conversation extraction
   - Markdown parsing and formatting
   - Tag injection
   - Export functionality

3. **Integration with Obsidian**
   - Vault synchronization
   - Bidirectional file updates
   - Metadata consistency

4. **AI Assistant**
   - Context-aware tag suggestions
   - Content summarization
   - Document organization recommendations

5. **MCP Integration**
   - AI-powered document analysis
   - Conversation understanding
   - Named entity recognition
   - Knowledge extraction and organization

## Implementation Details

### Extension Manifest

The extension is defined in `package.json` with:

- Commands
- Menu items
- View containers
- Configuration schema
- MCP server registration
- API context consumers

### Command Registration

Commands follow a consistent pattern:

```typescript
// Register commands with clear naming and categorization
context.subscriptions.push(
  vscode.commands.registerCommand('obsidian-magic.tagFile', tagFileCommand),
  vscode.commands.registerCommand('obsidian-magic.analyzeConversation', analyzeConversationCommand),
  // MCP specific commands
  vscode.commands.registerCommand('obsidian-magic.startMcpServer', startMcpServerCommand),
  vscode.commands.registerCommand('obsidian-magic.registerTools', registerToolsCommand)
);
```

### View Implementation

Views use WebView API:

```typescript
// Create and configure WebView
const panel = vscode.window.createWebviewPanel(
  'obsidianMagic.tagEditor',
  'Tag Editor',
  vscode.ViewColumn.Beside,
  {
    enableScripts: true,
    retainContextWhenHidden: true,
    localResourceRoots: [uri]
  }
);

// Setup message passing
panel.webview.onDidReceiveMessage(
  message => handleWebViewMessage(panel, message),
  undefined,
  context.subscriptions
);
```

### MCP Server Integration

The extension registers and manages MCP servers:

```typescript
// MCP Server registration
export function activateMcpServer(context: vscode.ExtensionContext): void {
  // Register server factories
  const mcpServerManager = new McpServerManager();
  
  // Register with default tools
  mcpServerManager.registerTools([
    new TagExtractionTool(),
    new DocumentAnalysisTool(),
    new ContentOrganizationTool()
  ]);
  
  // Start server based on user configuration
  const server = await mcpServerManager.startServer({
    port: vscode.workspace.getConfiguration('obsidianMagic').get('mcpServerPort') || 7777,
    maxConnections: 5
  });
  
  // Add cleanup on deactivation
  context.subscriptions.push({
    dispose: () => server.shutdown()
  });
}
```

## Testing Approach

The extension uses a hybrid testing approach:

- **Integration Tests**: Mocha tests with `@vscode/test-electron`
- **Unit Tests**: Currently Vitest, migrating to Mocha for consistency
- **Mocking**: Vitest mocks (transitioning to Sinon for Mocha tests)
- **VS Code API**: Extension Host mocking

## Development Workflow

1. **Setup**
   - Install dependencies with `pnpm install`
   - Build extension with `nx build vscode`

2. **Development**
   - Run extension with `nx dev vscode` or F5 in VS Code
   - Automatically watches for changes
   - Configure launch.json for debugging

3. **Testing**
   - Run tests with `nx test vscode`
   - Debug tests with provided launch configurations

4. **Packaging**
   - Package extension with `nx package vscode`
   - Results in VSIX file for distribution

## Related Documentation

For more information, refer to:

- [Testing Strategy](mdc:.cursor/rules/testing-strategy.mdc)
- [TypeScript Best Practices](mdc:.cursor/rules/typescript-best-practices.mdc)
- [Error Handling](mdc:.cursor/rules/error-handling.mdc)
- [API Integration](mdc:.cursor/rules/api-integration.mdc)

## Architecture Overview

The VS Code extension component provides bidirectional integration between Obsidian vaults and development environments:

```
┌────────────────┐       ┌────────────────┐       ┌────────────────┐
│                │       │                │       │                │
│  Cursor Editor │◄─────►│   MCP Server   │◄─────►│  Tag System    │
│                │       │                │       │                │
└────────────────┘       └────────┬───────┘       └────────────────┘
                                  │                        ▲
                                  ▼                        │
                         ┌────────────────┐       ┌────────────────┐
                         │                │       │                │
                         │  AI Functions  │──────►│ Notes Database │
                         │                │       │                │
                         └────────────────┘       └────────────────┘
```

## Integration Principles

1. **Bidirectional Synchronization**:
   - Implement real-time file system watchers
   - Use optimized diffing for change detection
   - Preserve metadata across environments
   - Handle conflicts gracefully with clear resolution strategies

2. **Environment Detection**:
   - Dynamically detect Cursor vs standard VS Code environment
   - Activate features based on available capabilities
   - Degrade gracefully when specific features aren't available
   - Support VS Code Web and Desktop environments

3. **Extension API Usage**:
   - Follow VS Code extension API best practices
   - Use proper activation events for performance
   - Implement tree views with correct data providers
   - Register commands with descriptive labels and icons

4. **User Experience Considerations**:
   - Maintain consistency with VS Code design patterns
   - Provide clear visual indicators for synchronization status
   - Use notifications judiciously for important events
   - Implement progressive disclosure for advanced features

## Cursor-Specific Integration

1. **MCP Server Implementation**:
   - Implement the Model Context Protocol standard
   - Register custom tools for tag management
   - Provide appropriate context windowing
   - Use type-safe function calling interfaces
   - Optimize for token efficiency

2. **AI Model Integration**:
   - Support Claude 3.5 and other Cursor-provided models
   - Implement context-aware tagging suggestions
   - Use appropriate prompting strategies
   - Provide relevant knowledge base context
   - Cache responses for improved performance

3. **Custom Instructions**:
   - Develop tag-aware custom instructions
   - Create instruction templates for common operations
   - Support dynamic context modification
   - Implement sharing mechanisms for instructions

4. **Cursor UI Integration**:
   - Integrate with Cursor's chat interface
   - Implement sidebar extensions
   - Match Cursor's design language
   - Add custom keyboard shortcuts
   - Provide AI processing status indicators

## VS Code Extension Development

1. **Extension Structure**:
   - Use modular architecture with clear separation of concerns
   - Implement the activation pattern correctly
   - Register commands, views, and providers appropriately
   - Follow VS Code extension packaging guidelines

2. **Performance Considerations**:
   - Use lazy loading for non-essential components
   - Implement background processing for heavy operations
   - Cache results to prevent redundant operations
   - Monitor resource usage carefully
   - Implement cancellation for long-running tasks

3. **Error Handling**:
   - Provide meaningful error messages
   - Implement retry logic for network operations
   - Log errors appropriately for debugging
   - Handle graceful degradation for missing features
   - Offer troubleshooting suggestions to users

4. **Security Best Practices**:
   - Respect workspace trust model
   - Validate all inputs thoroughly
   - Handle sensitive data securely
   - Implement appropriate authentication
   - Follow least privilege principle

## Testing Approach

1. **Extension Testing**:
   - Use VS Code's extension testing framework
   - Implement unit tests for core components
   - Create integration tests for full workflows
   - Test across operating systems
   - Verify proper activation/deactivation

2. **MCP Server Testing**:
   - Test tool registration process
   - Validate function calling interfaces
   - Simulate AI model interactions
   - Test error handling scenarios
   - Verify performance under load

## Documentation

For detailed implementation information, refer to:

- [VS Code-Specific Features](mdc:documentation/vscode-integration/vscode-features.md)
- [Cursor Integration](mdc:documentation/vscode-integration/cursor-integration.md)
- [MCP Server Implementation](mdc:documentation/vscode-integration/mcp-server.md)
- [Obsidian Vault Integration](mdc:documentation/vscode-integration/vault-integration.md)
- [Developer Experience](mdc:documentation/vscode-integration/developer-experience.md)
- [Troubleshooting](mdc:documentation/vscode-integration/troubleshooting.md) 